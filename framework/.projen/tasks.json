{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        },
        {
          "exec": "npx projen copy-resources"
        }
      ]
    },
    "copy-resources": {
      "name": "copy-resources",
      "description": "Copy all resources directories from src to lib",
      "steps": [
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/utils/lib/resources lib/utils/lib"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/utils/examples/resources lib/utils/examples"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/streaming/lib/msk/resources lib/streaming/lib/msk"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/processing/lib/spark-runtime/emr-containers/resources lib/processing/lib/spark-runtime/emr-containers"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/governance/lib/resources lib/governance/lib"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/governance/lib/datazone/resources lib/governance/lib/datazone"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/consumption/lib/redshift/resources lib/consumption/lib/redshift"
        },
        {
          "exec": "rsync -avr --exclude '*.ts' --exclude '*.js' src/consumption/lib/opensearch/resources lib/consumption/lib/opensearch"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools",
          "receiveArgs": true
        },
        {
          "exec": "eslint --ext .ts,.tsx --rule 'local-rules/url-checker: error' src",
          "condition": "[ -n \"$CI\" ]"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "package:js",
          "condition": "node -e \"if (!process.env.CI) process.exit(1)\""
        },
        {
          "spawn": "package-all",
          "condition": "node -e \"if (process.env.CI) process.exit(1)\""
        },
        {
          "spawn": "package-all"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:python"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "exec": "rm -f .jsii.tabl.json && jsii-rosetta extract .jsii && node generate_doc.mjs"
        },
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true",
        "MAJOR": "1"
      },
      "steps": [
        {
          "spawn": "install:ci"
        },
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot --group=-e2e",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:e2e": {
      "name": "test:e2e",
      "description": "Run framework end-to-end tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot --group=e2e"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@aws-cdk/lambda-layer-kubectl-v30,@jest/globals,@types/eslint,@types/jest,@types/node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-local-rules,jest,jest-runner-groups,jsii-diff,jsii-pacmak,node-libcurl,rosetta,sync-request-curl,ts-jest,typescript,@types/js-yaml,@types/semver,js-yaml,semver,simple-base"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @aws-cdk/cli-lib-alpha @aws-cdk/lambda-layer-kubectl-v30 @jest/globals @stylistic/eslint-plugin @types/eslint @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser cdk-nag commit-and-tag-version esbuild eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-local-rules eslint jest jest-junit jest-runner-groups jsii-diff jsii-docgen jsii-pacmak jsii-rosetta jsii node-libcurl rosetta sync-request-curl ts-jest typescript @types/js-yaml @types/semver js-yaml semver simple-base aws-cdk-lib constructs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
